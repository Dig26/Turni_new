// src/components/turni/popups/CellPopup.jsx
import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import '../../../styles/Modal.css';

const CellPopup = ({ onClose, onSave, allTimes, selectedCell, hotInstance }) => {
  const [mode, setMode] = useState('lavora');
  const [orarioInizio, setOrarioInizio] = useState('');
  const [orarioFine, setOrarioFine] = useState('');
  const [motivo, setMotivo] = useState('nessuna');
  const [abbr, setAbbr] = useState('');
  const [totalHours, setTotalHours] = useState(0);
  
  // Ottieni le motivazioni dal Redux store
  const negozioId = useSelector(state => state.negozi.currentNegozio ? state.negozi.currentNegozio.id : null);
  const motivazioni = useSelector(state => 
    state.motivazioni && state.motivazioni.items && negozioId
      ? state.motivazioni.items[negozioId] || []
      : []
  );
  
  useEffect(() => {
    if (selectedCell && hotInstance) {
      // Leggi i valori dalle celle selezionate
      const { row, col } = selectedCell;
      
      // Determina se è colonna inizio o fine
      const inizioCol = col % 2 === 0 ? col : col - 1;
      const fineCol = inizioCol + 1;
      
      const inizioVal = hotInstance.getDataAtCell(row, inizioCol);
      const fineVal = hotInstance.getDataAtCell(row, fineCol);
      
      // Se l'inizio è "X", allora siamo in modalità "a casa"
      if (inizioVal === 'X') {
        setMode('aCasa');
        
        // Estrai motivo e abbr dal valore fine
        if (fineVal && fineVal.indexOf('|') !== -1) {
          const parts = fineVal.split('|');
          setMotivo(parts[0].trim());
          setAbbr(parts[1].trim());
        }
      } else if (inizioVal && inizioVal.indexOf(' - ') !== -1) {
        // Siamo in modalità "lavora" con orari già definiti
        setMode('lavora');
        
        // Estrai orario inizio e fine
        const parts = inizioVal.split(' - ');
        setOrarioInizio(parts[0].trim());
        setOrarioFine(parts[1].trim());
        
        // Calcola le ore totali
        if (parts[0].trim() && parts[1].trim()) {
          const hours = calculateHoursBetween(parts[0].trim(), parts[1].trim());
          setTotalHours(hours);
        }
      } else {
        // Modalità "lavora" di default, celle vuote
        setMode('lavora');
        setOrarioInizio('');
        setOrarioFine('');
        
        // Se c'è un valore numerico nella cella fine, è un'impostazione manuale delle ore
        if (fineVal && !isNaN(parseFloat(fineVal.replace(',', '.')))) {
          setTotalHours(parseFloat(fineVal.replace(',', '.')));
        }
      }
    }
  }, [selectedCell, hotInstance]);
  
  // Funzione per calcolare le ore tra due orari
  const calculateHoursBetween = (startTime, endTime) => {
    if (!startTime || !endTime) return 0;
    
    const [startHours, startMinutes] = startTime.split(':').map(Number);
    const [endHours, endMinutes] = endTime.split(':').map(Number);
    
    // Converti in minuti totali
    const startTotalMinutes = startHours * 60 + startMinutes;
    let endTotalMinutes = endHours * 60 + endMinutes;
    
    // Gestisci il caso in cui il turno finisca il giorno dopo
    if (endTotalMinutes < startTotalMinutes) {
      endTotalMinutes += 24 * 60; // Aggiungi un giorno in minuti
    }
    
    // Calcola la differenza in ore
    const diffMinutes = endTotalMinutes - startTotalMinutes;
    return parseFloat((diffMinutes / 60).toFixed(2));
  };
  
  // Funzione per calcolare l'orario di fine dato l'orario di inizio e le ore totali
  const calculateEndTime = (startTime, hours) => {
    if (!startTime || isNaN(hours)) return '';
    
    const [startHours, startMinutes] = startTime.split(':').map(Number);
    const totalMinutes = startHours * 60 + startMinutes + hours * 60;
    
    const endHours = Math.floor(totalMinutes / 60) % 24;
    const endMinutes = Math.round(totalMinutes % 60);
    
    return `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
  };
  
  // Funzione per calcolare l'orario di inizio dato l'orario di fine e le ore totali
  const calculateStartTime = (endTime, hours) => {
    if (!endTime || isNaN(hours)) return '';
    
    const [endHours, endMinutes] = endTime.split(':').map(Number);
    let totalMinutes = endHours * 60 + endMinutes - hours * 60;
    
    // Se il risultato è negativo, sottrai da un giorno intero
    if (totalMinutes < 0) {
      totalMinutes += 24 * 60;
    }
    
    const startHours = Math.floor(totalMinutes / 60) % 24;
    const startMinutes = Math.round(totalMinutes % 60);
    
    return `${startHours.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;
  };
  
  const handleModeChange = (newMode) => {
    setMode(newMode);
  };
  
  useEffect(() => {
    // Se il motivo cambia, aggiorna automaticamente la sigla
    if (motivo !== 'nessuna') {
      const selectedMotivazione = motivazioni.find(m => m.id === motivo);
      if (selectedMotivazione && selectedMotivazione.sigla) {
        setAbbr(selectedMotivazione.sigla);
      }
    } else {
      setAbbr('');
    }
  }, [motivo, motivazioni]);
  
  const handleSubmit = () => {
    if (mode === 'lavora') {
      // Validazione
      if (!orarioInizio || !orarioFine) {
        alert('Seleziona un orario di inizio e fine.');
        return;
      }
      
      // Verifica che l'orario di fine sia successivo all'orario di inizio
      const startMinutes = orarioInizio.split(':').map(Number).reduce((acc, val, i) => i === 0 ? val * 60 : acc + val, 0);
      const endMinutes = orarioFine.split(':').map(Number).reduce((acc, val, i) => i === 0 ? val * 60 : acc + val, 0);
      
      if (endMinutes <= startMinutes && endMinutes !== 0) {
        // Se l'orario di fine è minore di quello di inizio, assumiamo che sia il giorno dopo
        // Quindi valido solo se la differenza non è di un giorno intero (24 ore)
        if (startMinutes - endMinutes >= 24 * 60) {
          alert('L\'orario di fine deve essere successivo all\'orario di inizio.');
          return;
        }
      }
      
      onSave({
        mode: 'lavora',
        orarioInizio,
        orarioFine
      });
    } else {
      onSave({
        mode: 'aCasa',
        motivo,
        abbr
      });
    }
  };
  
  // Gestione cambio orario inizio
  const handleStartTimeChange = (value) => {
    setOrarioInizio(value);
    
    // Se c'è già un valore per le ore totali, calcola l'orario di fine
    if (totalHours > 0 && value) {
      const newEndTime = calculateEndTime(value, totalHours);
      setOrarioFine(newEndTime);
    } else if (orarioFine) {
      // Se c'è già un orario di fine, calcola le ore totali
      const hours = calculateHoursBetween(value, orarioFine);
      setTotalHours(hours);
    }
  };
  
  // Gestione cambio orario fine
  const handleEndTimeChange = (value) => {
    setOrarioFine(value);
    
    // Se c'è già un valore per le ore totali, calcola l'orario di inizio
    if (totalHours > 0 && value) {
      const newStartTime = calculateStartTime(value, totalHours);
      setOrarioInizio(newStartTime);
    } else if (orarioInizio) {
      // Se c'è già un orario di inizio, calcola le ore totali
      const hours = calculateHoursBetween(orarioInizio, value);
      setTotalHours(hours);
    }
  };
  
  // Filtra le opzioni di orario fine (solo orari successivi all'inizio)
  const filteredEndTimes = orarioInizio 
    ? allTimes.filter(time => time > orarioInizio) 
    : allTimes;
  
  // Filtra le opzioni di orario inizio (solo orari precedenti alla fine)
  const filteredStartTimes = orarioFine 
    ? allTimes.filter(time => time < orarioFine)
    : allTimes;
  
  // Estrai giorno e data per il titolo
  let headerTitle = 'Modifica Turno';
  
  if (selectedCell && hotInstance) {
    const { row, col } = selectedCell;
    const dayOfWeek = hotInstance.getDataAtCell(row, 0);
    const dayOfMonth = hotInstance.getDataAtCell(row, 1);
    
    // Calcola l'indice del dipendente
    const pairIndex = Math.floor((col - 2) / 2);
    const empName = hotInstance.getDataAtCell(0, 2 + 2 * pairIndex);
    
    headerTitle = `${empName}: ${dayOfWeek} ${dayOfMonth}`;
  }
  
  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h3><i className="fas fa-user-clock"></i> {headerTitle}</h3>
        </div>
        
        <div className="modal-body">
          <div className="mode-selector">
            <div className="mode-option">
              <label>
                <input 
                  type="radio" 
                  name="workOption" 
                  value="lavora" 
                  checked={mode === 'lavora'} 
                  onChange={() => handleModeChange('lavora')} 
                />
                <span><i className="fas fa-briefcase"></i> Lavora</span>
              </label>
              
              {mode === 'lavora' && (
                <div className="time-container">
                  <div className="form-group">
                    <label htmlFor="orarioInizio">Orario Inizio</label>
                    <select 
                      id="orarioInizio" 
                      value={orarioInizio} 
                      onChange={(e) => handleStartTimeChange(e.target.value)}
                    >
                      <option value="">Seleziona orario</option>
                      {filteredStartTimes.map(time => (
                        <option key={time} value={time}>{time}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="orarioFine">Orario Fine</label>
                    <select 
                      id="orarioFine" 
                      value={orarioFine} 
                      onChange={(e) => handleEndTimeChange(e.target.value)}
                    >
                      <option value="">Seleziona orario</option>
                      {filteredEndTimes.map(time => (
                        <option key={time} value={time}>{time}</option>
                      ))}
                    </select>
                  </div>
                  
                  {totalHours > 0 && (
                    <div className="form-group" style={{ marginTop: '10px', color: '#2980b9', fontSize: '0.9em' }}>
                      <i className="fas fa-info-circle"></i> Tempo calcolato: {totalHours.toFixed(2).replace('.', ',')} ore
                    </div>
                  )}
                </div>
              )}
            </div>
            
            <div className="mode-option">
              <label>
                <input 
                  type="radio" 
                  name="workOption" 
                  value="aCasa" 
                  checked={mode === 'aCasa'} 
                  onChange={() => handleModeChange('aCasa')} 
                />
                <span><i className="fas fa-home"></i> A Casa</span>
              </label>
              
              {mode === 'aCasa' && (
                <div className="a-casa-container">
                  <div className="form-group">
                    <label htmlFor="motivo"><i className="fas fa-tags"></i> Motivazioni:</label>
                    <select 
                      id="motivo" 
                      value={motivo} 
                      onChange={(e) => setMotivo(e.target.value)}
                      required
                    >
                      {motivazioni.map(m => (
                        <option key={m.id} value={m.id}>{m.nome}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="abbr">Sigla</label>
                    <input 
                      type="text" 
                      id="abbr" 
                      maxLength="2" 
                      placeholder="Sigla" 
                      value={abbr} 
                      onChange={(e) => setAbbr(e.target.value)} 
                      disabled={motivo === 'nessuna'} 
                      readOnly={motivo !== 'nessuna'}
                    />
                    <small className="info-text">La sigla viene impostata automaticamente in base alla motivazione</small>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        
        <div className="modal-footer">
          <button 
            className="btn-secondary" 
            onClick={onClose}
          >
            <i className="fas fa-times"></i> Annulla
          </button>
          
          <button 
            className="btn-primary" 
            onClick={handleSubmit}
            disabled={mode === 'aCasa' && motivo !== 'nessuna' && !abbr}
          >
            <i className="fas fa-check"></i> Conferma
          </button>
        </div>
      </div>
    </div>
  );
};

export default CellPopup;